{{- if and .Values.resource.tls.enabled .Values.resource.tls.useCertManager }}
apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.resource.namespace }}
---
# cert-manager resources
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: tls-selfsigned-issuer
  namespace: {{ .Values.resource.namespace }}
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: tls-selfsigned-ca
  namespace: {{ .Values.resource.namespace }}
spec:
  isCA: true
  commonName: "*.{{ .Values.resource.name }}-svc.{{ .Values.namespace }}.svc.cluster.local"
  dnsNames:
    - "*.{{ .Values.resource.name }}-svc.{{ .Values.namespace }}.svc.cluster.local"
  secretName: {{ .Values.resource.tls.caCertificateSecretRef }}
  privateKey:
    algorithm: ECDSA
    size: 256
  issuerRef:
    name: tls-selfsigned-issuer
    kind: Issuer
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: tls-ca-issuer
  namespace: {{ .Values.resource.namespace }}
spec:
  ca:
    secretName: {{ .Values.resource.tls.caCertificateSecretRef }}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: cert-manager-tls-certificate
  namespace: {{ .Values.resource.namespace }}
spec:
  secretName: {{ .Values.resource.tls.certificateKeySecretRef }}
  issuerRef:
    name: tls-ca-issuer
    kind: Issuer
  duration: {{ .Values.resource.tls.certManager.certDuration | default "8760h" }}   # default to 365 days
  renewBefore: {{ .Values.resource.tls.certManager.renewCertBefore | default "720h" }} # default to 30 days
  commonName: "*.{{ .Values.resource.name }}-svc.{{ .Values.namespace }}.svc.cluster.local"
  dnsNames:
    - "*.{{ .Values.resource.name }}-svc.{{ .Values.namespace }}.svc.cluster.local"
{{- end }}

{{- if .Values.createResource }}
# mongodb resources
---
apiVersion: mongodbcommunity.mongodb.com/v1
kind: MongoDBCommunity
metadata:
  name: {{ .Values.resource.name }}
  namespace: {{ .Values.resource.namespace }}
spec:
  members: {{ .Values.resource.members }}
  type: ReplicaSet
  version: {{ .Values.resource.version }}
  security:
    tls:
      enabled: {{ .Values.resource.tls.enabled }}
      {{- if .Values.resource.tls.enabled }}
      certificateKeySecretRef:
        name: {{ .Values.resource.tls.certificateKeySecretRef }}
      caCertificateSecretRef:
        name: {{ .Values.resource.tls.caCertificateSecretRef }}
      {{- end }}
    authentication:
      modes: [ "SCRAM" ]
  users:
    - name: {{ .Values.resource.user.name }}
      db: {{ .Values.resource.user.database }}
      passwordSecretRef: # a reference to the secret that will be used to generate the user's password
        name: {{ .Values.resource.user.name }}-password
      roles:
        - name: clusterAdmin
          db: {{ .Values.resource.user.database }}
        - name: userAdminAnyDatabase
          db: {{ .Values.resource.user.database }}
      scramCredentialsSecretName: {{ .Values.resource.user.name }}-scram
  additionalMongodConfig:
    storage.wiredTiger.engineConfig.journalCompressor: zlib

# the user credentials will be generated from this secret
# once the credentials are generated, this secret is no longer required
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.resource.user.name }}-password
  namespace: {{ .Values.resource.namespace }}
type: Opaque
stringData:
  password: {{ .Values.resource.user.password }}
{{- end }}
